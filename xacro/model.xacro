<?xml version="1.0"?>
<robot name="tortuga" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <xacro:include filename="$(find tortuga)/xacro/inertia.xacro"/>
  <xacro:include filename="$(find tortuga)/xacro/materials.xacro"/>
  <xacro:include filename="$(find tortuga)/xacro/properties.xacro"/>
  <xacro:include filename="$(find tortuga)/xacro/drive_block.xacro"/>
  <xacro:include filename="$(find tortuga)/xacro/caster_block.xacro"/>
  <xacro:include filename="$(find tortuga)/xacro/modules.xacro"/>

  <!-- Select installed modules -->

  <xacro:property name="front_module" value="genius_ks05"/> <!-- dummy, picam_noir, genius_ks05 -->
  <xacro:property name="rear_module"  value="dummy"/> <!-- dummy, antenna, speaker -->

  <!-- Footprint -->

  <link name="base_footprint"/>
  <joint name="base_footprint_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0 0.13"/>
    <parent link="base_footprint"/>
    <child link="base_link"/>
  </joint>

  <!-- Alternative parametric base link -->
  <!-- <xacro:include filename="$(find tortuga)/xacro/parametric_base.xacro"/> -->

  <!-- Robot base -->

  <link name="base_link">
    <visual>
      <origin xyz="0.005 0.002 -0.14" rpy="0 0 ${-pi/2}"/>
      <geometry>
        <mesh filename="package://tortuga/meshes/body.stl" scale="0.001 0.001 0.001"/>
      </geometry>
      <material name="aluminium"/>
    </visual>
    <collision>
      <origin xyz="0 0 0.01" rpy="0 0 0"/>
      <geometry>
        <box size="${body_length} ${body_width} ${body_height}"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${body_mass}"/>
      <xacro:box_inertia m="${body_mass}" x="${body_length}" y="${body_width}" z="${body_height}"/>
    </inertial>
  </link>

  <!-- Front module -->

  <xacro:if value="${front_module=='dummy'}">
    <xacro:dummy name="front_dummy" parent_link="base_link">
      <origin xyz="0.188 0 -0.0105"
              rpy="0 0 0"/>
    </xacro:dummy>
  </xacro:if>

  <xacro:if value="${front_module=='genius_ks05'}">
    <xacro:genius_ks05 name="usb_cam" parent_link="base_link">
      <origin xyz="0.188 0 -0.0105"
              rpy="0 0 0"/>
    </xacro:genius_ks05>
  </xacro:if>

  <xacro:if value="${front_module=='picam_noir'}">
    <xacro:picam_noir name="picam" parent_link="base_link">
      <origin xyz="0.188 0 -0.0105"
              rpy="0 0 0"/>
    </xacro:picam_noir>
  </xacro:if>

  <!-- Rear module -->

  <xacro:if value="${rear_module=='dummy'}">
    <xacro:dummy name="rear_dummy" parent_link="base_link">
      <origin xyz="-0.187 0 -0.0105"
              rpy="0 0 ${pi}"/>
    </xacro:dummy>
  </xacro:if>

  <xacro:if value="${rear_module=='antenna'}">
    <xacro:antenna name="antenna" parent_link="base_link">
      <origin xyz="-0.187 0 -0.0105"
              rpy="0 0 ${pi}"/>
    </xacro:antenna>
  </xacro:if>

  <!-- Drive blocks -->

  <xacro:drive_block name="left" inverted="true">
    <origin xyz="${long_profile_length/2-profile_width-motor_suspension_width/2}
                 ${short_profile_length/2-motor_suspension_depth/2}
                 0"
            rpy="0 0 0"/>
  </xacro:drive_block>

  <xacro:drive_block name="right" inverted="false">
    <origin xyz="${long_profile_length/2-profile_width-motor_suspension_width/2}
                 ${-short_profile_length/2+motor_suspension_depth/2}
                 0"
            rpy="0 0 ${pi}"/>
  </xacro:drive_block>

  <gazebo>
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
      <updateRate>100.0</updateRate>
      <leftJoint>left_wheel_joint</leftJoint>
      <rightJoint>right_wheel_joint</rightJoint>
      <wheelSeparation>0.255</wheelSeparation>
      <wheelDiameter>${drive_wheel_radius*2}</wheelDiameter>
      <wheelAcceleration>0.9</wheelAcceleration>
      <wheelTorque>1.0</wheelTorque>
      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>wheel_odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <robotBaseFrame>base_footprint</robotBaseFrame>
      <publishWheelTF>false</publishWheelTF>
      <publishOdom>true</publishOdom>
      <publishOdomTF>true</publishOdomTF>
      <publishWheelJointState>true</publishWheelJointState>
      <legacyMode>false</legacyMode>
    </plugin>
  </gazebo>

  <!-- Onboard IMU -->

  <link name="imu_link"/>
  <joint name="imu_joint" type="fixed">
    <parent link="base_link"/>
    <child link="imu_link"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <gazebo reference="imu_link">
     <gravity>false</gravity>
     <sensor name="imu_sensor" type="imu">
       <always_on>true</always_on>
       <update_rate>100.0</update_rate>
       <visualize>true</visualize>
       <topic>imu</topic>
       <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
          <gravity>false</gravity>
          <topicName>imu</topicName>
          <bodyName>imu_link</bodyName>
          <updateRateHZ>100.0</updateRateHZ>
          <gaussianNoise>0.0</gaussianNoise>
          <xyzOffset>0 0 0</xyzOffset>
          <rpyOffset>0 0 0</rpyOffset>
          <frameName>imu_link</frameName>
          <initialOrientationAsReference>false</initialOrientationAsReference>
       </plugin>
       <pose>0 0 0 0 0 0</pose>
     </sensor>
  </gazebo>

  <!-- <gazebo>
      <plugin name="p3d_base_controller" filename="libgazebo_ros_p3d.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>100.0</updateRate>
          <bodyName>base_footprint</bodyName>
          <topicName>base_pose_ground_truth</topicName>
          <gaussianNoise>0.00001</gaussianNoise>
          <frameName>world</frameName>
          <xyzOffsets>0 0 0</xyzOffsets>
          <rpyOffsets>0 0 0</rpyOffsets>
      </plugin>
  </gazebo> -->

</robot>
